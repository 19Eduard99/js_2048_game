{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ class $a5fd07fa01589658$var$Game {\n    /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */ constructor(initialState){\n        // eslint-disable-next-line no-console\n        this.board = initialState;\n        this.score = 0;\n        this.button = document.querySelector(\".button\");\n        this.isStarted = false;\n        this.handleClick = this.startOrRestart.bind(this);\n        this.button.addEventListener(\"click\", this.handleClick);\n        this.tableCells = document.querySelectorAll(\".field-cell\");\n    }\n    moveLeft() {\n        let boardChanged = false;\n        for(let row = 0; row < this.board.length; row++){\n            const currentRow = this.board[row];\n            let newRow = currentRow.filter((value)=>value !== 0);\n            for(let i = 0; i < newRow.length - 1; i++)if (newRow[i] === newRow[i + 1]) {\n                newRow[i] = newRow[i] * 2;\n                newRow[i + 1] = 0;\n                this.score += newRow[i];\n                boardChanged = true;\n            }\n            newRow = newRow.filter((value)=>value !== 0);\n            while(newRow.length < 4)newRow.push(0);\n            this.board[row] = newRow;\n            if (JSON.stringify(currentRow) !== JSON.stringify(newRow)) boardChanged = true;\n        }\n        if (boardChanged) {\n            this.placeRandomNumber(this.board);\n            this.renderBoard();\n            this.renderScore();\n        }\n        this.has2048Tile();\n        if (this.checkLose()) this.showLoseMessage();\n    }\n    moveRight() {\n        let boardChanged = false;\n        for(let row = 0; row < this.board.length; row++){\n            const currentRow = this.board[row];\n            let newRow = currentRow.filter((value)=>value !== 0);\n            for(let i = newRow.length - 1; i > 0; i--)if (newRow[i] === newRow[i - 1]) {\n                newRow[i] = newRow[i] * 2;\n                newRow[i - 1] = 0;\n                this.score += newRow[i];\n                boardChanged = true;\n            }\n            newRow = newRow.filter((value)=>value !== 0);\n            while(newRow.length < 4)newRow.unshift(0);\n            this.board[row] = newRow;\n            if (JSON.stringify(currentRow) !== JSON.stringify(newRow)) boardChanged = true;\n        }\n        if (boardChanged) {\n            this.placeRandomNumber(this.board);\n            this.renderBoard();\n            this.renderScore();\n        }\n        this.has2048Tile();\n        if (this.checkLose()) this.showLoseMessage();\n    }\n    moveUp() {\n        let boardChanged = false;\n        this.board = this.transpose(this.board);\n        for(let row = 0; row < this.board.length; row++){\n            const currentRow = this.board[row];\n            let newRow = currentRow.filter((value)=>value !== 0);\n            for(let i = 0; i < newRow.length - 1; i++)if (newRow[i] === newRow[i + 1]) {\n                newRow[i] = newRow[i] * 2;\n                newRow[i + 1] = 0;\n                this.score += newRow[i];\n                boardChanged = true;\n            }\n            newRow = newRow.filter((value)=>value !== 0);\n            while(newRow.length < 4)newRow.push(0);\n            this.board[row] = newRow;\n            if (JSON.stringify(currentRow) !== JSON.stringify(newRow)) boardChanged = true;\n        }\n        this.board = this.transpose(this.board);\n        if (boardChanged) {\n            this.placeRandomNumber(this.board);\n            this.renderBoard();\n            this.renderScore();\n        }\n        this.has2048Tile();\n        if (this.checkLose()) this.showLoseMessage();\n    }\n    moveDown() {\n        let boardChanged = false;\n        this.board = this.transpose(this.board);\n        for(let row = 0; row < this.board.length; row++){\n            const currentRow = this.board[row];\n            let newRow = currentRow.filter((value)=>value !== 0);\n            for(let i = newRow.length - 1; i > 0; i--)if (newRow[i] === newRow[i - 1]) {\n                newRow[i] = newRow[i] * 2;\n                newRow[i - 1] = 0;\n                this.score += newRow[i];\n                boardChanged = true;\n            }\n            newRow = newRow.filter((value)=>value !== 0);\n            while(newRow.length < 4)newRow.unshift(0);\n            this.board[row] = newRow;\n            if (JSON.stringify(currentRow) !== JSON.stringify(newRow)) boardChanged = true;\n        }\n        this.board = this.transpose(this.board);\n        if (boardChanged) {\n            this.placeRandomNumber(this.board);\n            this.renderBoard();\n            this.renderScore();\n        }\n        this.has2048Tile();\n        if (this.checkLose()) this.showLoseMessage();\n    }\n    transpose(board) {\n        return board[0].map((_, colIndex)=>board.map((row)=>row[colIndex]));\n    }\n    /**\n   * @returns {number}\n   */ getScore() {\n        const scoreElement = document.querySelector(\".game-score\");\n        scoreElement.textContent = this.score;\n        return this.score;\n    }\n    /**\n   * @returns {number[][]}\n   */ getState() {\n        return this.board;\n    }\n    /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * idle - the game has not started yet (the initial state);\n   * playing - the game is in progress;\n   * win - the game is won;\n   * lose - the game is lost\n   */ getStatus() {\n        if (!this.isStarted) return \"idle\";\n        else if (this.checkWin()) return \"win\";\n        else if (this.checkLose()) return \"lose\";\n        else return \"playing\";\n    }\n    startOrRestart() {\n        if (this.isStarted) this.restart();\n        else this.start();\n    }\n    /**\n   * Starts the game.\n   */ start() {\n        const messageElement = document.querySelector(\".message.message-start\");\n        messageElement.textContent = \"The game has started! Use the arrow keys to play.\";\n        this.button.classList.remove(\"start\");\n        this.button.classList.add(\"restart\");\n        this.button.textContent = \"Restart\";\n        this.isStarted = true;\n        this.placeRandomNumber(this.board);\n        this.placeRandomNumber(this.board);\n        this.renderBoard();\n    }\n    /**\n   * Resets the game.\n   */ restart() {\n        const messageElement = document.querySelector(\".message.message-start\");\n        const messageLoseElement = document.querySelector(\".message-lose\");\n        const gameScore = document.querySelector(\".game-score\");\n        if (!messageLoseElement.classList.contains(\"hidden\")) messageLoseElement.classList.add(\"hidden\");\n        messageElement.textContent = 'Press \"Start\" to begin game. Good luck!';\n        messageElement.classList.remove(\"hidden\");\n        this.button.classList.remove(\"restart\");\n        this.button.classList.add(\"start\");\n        this.button.textContent = \"Start\";\n        this.isStarted = false;\n        this.board = [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this.score = 0;\n        gameScore.textContent = 0;\n        this.renderBoard();\n    }\n    getRandomInt(min, max) {\n        return Math.floor(Math.random() * (max - min)) + min;\n    }\n    placeRandomNumber(board) {\n        const emptyCells = [];\n        for(let row = 0; row < board.length; row++){\n            for(let col = 0; col < board[row].length; col++)if (board[row][col] === 0) emptyCells.push([\n                row,\n                col\n            ]);\n        }\n        if (emptyCells.length > 0) {\n            const randomIndex = this.getRandomInt(0, emptyCells.length);\n            const [randomRow, randomCol] = emptyCells[randomIndex];\n            board[randomRow][randomCol] = Math.random() > 0.1 ? 2 : 4;\n        }\n    }\n    renderBoard() {\n        this.tableCells.forEach((cell, index)=>{\n            const row = Math.floor(index / 4);\n            const col = index % 4;\n            if (this.board[row][col] !== 0) {\n                cell.textContent = this.board[row][col];\n                cell.className = `field-cell field-cell--${this.board[row][col]}`;\n            } else {\n                cell.textContent = \"\";\n                cell.className = \"field-cell\";\n            }\n        });\n    }\n    renderScore() {\n        const scoreElement = document.querySelector(\".game-score\");\n        scoreElement.textContent = this.score;\n    }\n    has2048Tile() {\n        for(let row = 0; row < this.board.length; row++)for(let col = 0; col < this.board[row].length; col++){\n            if (this.board[row][col] >= 2048) return this.showWinMessage();\n        }\n    }\n    showWinMessage() {\n        const startMessage = document.querySelector(\".message.message-start\");\n        const winMessage = document.querySelector(\".message.message-win\");\n        const loseMessage = document.querySelector(\".message.message-lose\");\n        startMessage.classList.add(\"hidden\");\n        loseMessage.classList.add(\"hidden\");\n        winMessage.classList.remove(\"hidden\");\n    }\n    showLoseMessage() {\n        const startMessage = document.querySelector(\".message.message-start\");\n        const winMessage = document.querySelector(\".message.message-win\");\n        const loseMessage = document.querySelector(\".message.message-lose\");\n        startMessage.classList.add(\"hidden\");\n        winMessage.classList.add(\"hidden\");\n        loseMessage.classList.remove(\"hidden\");\n    }\n    checkLose() {\n        for(let row = 0; row < this.board.length; row++)for(let col = 0; col < this.board[row].length; col++){\n            if (this.board[row][col] === 0) return false;\n        }\n        for(let row = 0; row < this.board.length; row++)for(let col = 0; col < this.board[row].length; col++){\n            if (col < this.board[row].length - 1 && this.board[row][col] === this.board[row][col + 1]) return false;\n            if (row < this.board.length - 1 && this.board[row][col] === this.board[row + 1][col]) return false;\n        }\n        return true;\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$initialState = [\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ]\n];\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports($09e991522ca7e64e$var$initialState);\ndocument.addEventListener(\"keydown\", (e)=>{\n    switch(e.key){\n        case \"ArrowLeft\":\n            $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        case \"ArrowRight\":\n            $09e991522ca7e64e$var$game.moveRight();\n            break;\n        case \"ArrowUp\":\n            $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            $09e991522ca7e64e$var$game.moveDown();\n            break;\n    }\n});\n\n\n//# sourceMappingURL=index.013bcfab.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst initialState = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\nconst game = new Game(initialState);\n\ndocument.addEventListener('keydown', (e) => {\n  switch (e.key) {\n    case 'ArrowLeft':\n      game.moveLeft();\n      break;\n    case 'ArrowRight':\n      game.moveRight();\n      break;\n    case 'ArrowUp':\n      game.moveUp();\n      break;\n    case 'ArrowDown':\n      game.moveDown();\n      break;\n  }\n});\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(initialState) {\n    // eslint-disable-next-line no-console\n    this.board = initialState;\n    this.score = 0;\n    this.button = document.querySelector('.button');\n    this.isStarted = false;\n    this.handleClick = this.startOrRestart.bind(this);\n    this.button.addEventListener('click', this.handleClick);\n    this.tableCells = document.querySelectorAll('.field-cell');\n  }\n\n  moveLeft() {\n    let boardChanged = false;\n\n    for (let row = 0; row < this.board.length; row++) {\n      const currentRow = this.board[row];\n\n      let newRow = currentRow.filter((value) => value !== 0);\n\n      for (let i = 0; i < newRow.length - 1; i++) {\n        if (newRow[i] === newRow[i + 1]) {\n          newRow[i] = newRow[i] * 2;\n          newRow[i + 1] = 0;\n          this.score += newRow[i];\n          boardChanged = true;\n        }\n      }\n\n      newRow = newRow.filter((value) => value !== 0);\n\n      while (newRow.length < 4) {\n        newRow.push(0);\n      }\n\n      this.board[row] = newRow;\n\n      if (JSON.stringify(currentRow) !== JSON.stringify(newRow)) {\n        boardChanged = true;\n      }\n    }\n\n    if (boardChanged) {\n      this.placeRandomNumber(this.board);\n      this.renderBoard();\n      this.renderScore();\n    }\n\n    this.has2048Tile();\n\n    if (this.checkLose()) {\n      this.showLoseMessage();\n    }\n  }\n\n  moveRight() {\n    let boardChanged = false;\n\n    for (let row = 0; row < this.board.length; row++) {\n      const currentRow = this.board[row];\n\n      let newRow = currentRow.filter((value) => value !== 0);\n\n      for (let i = newRow.length - 1; i > 0; i--) {\n        if (newRow[i] === newRow[i - 1]) {\n          newRow[i] = newRow[i] * 2;\n          newRow[i - 1] = 0;\n          this.score += newRow[i];\n          boardChanged = true;\n        }\n      }\n\n      newRow = newRow.filter((value) => value !== 0);\n\n      while (newRow.length < 4) {\n        newRow.unshift(0);\n      }\n\n      this.board[row] = newRow;\n\n      if (JSON.stringify(currentRow) !== JSON.stringify(newRow)) {\n        boardChanged = true;\n      }\n    }\n\n    if (boardChanged) {\n      this.placeRandomNumber(this.board);\n      this.renderBoard();\n      this.renderScore();\n    }\n\n    this.has2048Tile();\n\n    if (this.checkLose()) {\n      this.showLoseMessage();\n    }\n  }\n\n  moveUp() {\n    let boardChanged = false;\n\n    this.board = this.transpose(this.board);\n\n    for (let row = 0; row < this.board.length; row++) {\n      const currentRow = this.board[row];\n\n      let newRow = currentRow.filter((value) => value !== 0);\n\n      for (let i = 0; i < newRow.length - 1; i++) {\n        if (newRow[i] === newRow[i + 1]) {\n          newRow[i] = newRow[i] * 2;\n          newRow[i + 1] = 0;\n          this.score += newRow[i];\n          boardChanged = true;\n        }\n      }\n\n      newRow = newRow.filter((value) => value !== 0);\n\n      while (newRow.length < 4) {\n        newRow.push(0);\n      }\n\n      this.board[row] = newRow;\n\n      if (JSON.stringify(currentRow) !== JSON.stringify(newRow)) {\n        boardChanged = true;\n      }\n    }\n\n    this.board = this.transpose(this.board);\n\n    if (boardChanged) {\n      this.placeRandomNumber(this.board);\n      this.renderBoard();\n      this.renderScore();\n    }\n\n    this.has2048Tile();\n\n    if (this.checkLose()) {\n      this.showLoseMessage();\n    }\n  }\n\n  moveDown() {\n    let boardChanged = false;\n\n    this.board = this.transpose(this.board);\n\n    for (let row = 0; row < this.board.length; row++) {\n      const currentRow = this.board[row];\n\n      let newRow = currentRow.filter((value) => value !== 0);\n\n      for (let i = newRow.length - 1; i > 0; i--) {\n        if (newRow[i] === newRow[i - 1]) {\n          newRow[i] = newRow[i] * 2;\n          newRow[i - 1] = 0;\n          this.score += newRow[i];\n          boardChanged = true;\n        }\n      }\n\n      newRow = newRow.filter((value) => value !== 0);\n\n      while (newRow.length < 4) {\n        newRow.unshift(0);\n      }\n\n      this.board[row] = newRow;\n\n      if (JSON.stringify(currentRow) !== JSON.stringify(newRow)) {\n        boardChanged = true;\n      }\n    }\n\n    this.board = this.transpose(this.board);\n\n    if (boardChanged) {\n      this.placeRandomNumber(this.board);\n      this.renderBoard();\n      this.renderScore();\n    }\n\n    this.has2048Tile();\n\n    if (this.checkLose()) {\n      this.showLoseMessage();\n    }\n  }\n\n  transpose(board) {\n    return board[0].map((_, colIndex) => board.map((row) => row[colIndex]));\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    const scoreElement = document.querySelector('.game-score');\n\n    scoreElement.textContent = this.score;\n\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.board;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * idle - the game has not started yet (the initial state);\n   * playing - the game is in progress;\n   * win - the game is won;\n   * lose - the game is lost\n   */\n\n  getStatus() {\n    if (!this.isStarted) {\n      return 'idle';\n    } else if (this.checkWin()) {\n      return 'win';\n    } else if (this.checkLose()) {\n      return 'lose';\n    } else {\n      return 'playing';\n    }\n  }\n\n  startOrRestart() {\n    if (this.isStarted) {\n      this.restart();\n    } else {\n      this.start();\n    }\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    const messageElement = document.querySelector('.message.message-start');\n\n    messageElement.textContent =\n      'The game has started! Use the arrow keys to play.';\n\n    this.button.classList.remove('start');\n    this.button.classList.add('restart');\n    this.button.textContent = 'Restart';\n    this.isStarted = true;\n    this.placeRandomNumber(this.board);\n    this.placeRandomNumber(this.board);\n    this.renderBoard();\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    const messageElement = document.querySelector('.message.message-start');\n    const messageLoseElement = document.querySelector('.message-lose');\n    const gameScore = document.querySelector('.game-score');\n\n    if (!messageLoseElement.classList.contains('hidden')) {\n      messageLoseElement.classList.add('hidden');\n    }\n\n    messageElement.textContent = 'Press \"Start\" to begin game. Good luck!';\n    messageElement.classList.remove('hidden');\n    this.button.classList.remove('restart');\n    this.button.classList.add('start');\n    this.button.textContent = 'Start';\n    this.isStarted = false;\n\n    this.board = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n\n    this.score = 0;\n    gameScore.textContent = 0;\n    this.renderBoard();\n  }\n\n  getRandomInt(min, max) {\n    return Math.floor(Math.random() * (max - min)) + min;\n  }\n\n  placeRandomNumber(board) {\n    const emptyCells = [];\n\n    for (let row = 0; row < board.length; row++) {\n      for (let col = 0; col < board[row].length; col++) {\n        if (board[row][col] === 0) {\n          emptyCells.push([row, col]);\n        }\n      }\n    }\n\n    if (emptyCells.length > 0) {\n      const randomIndex = this.getRandomInt(0, emptyCells.length);\n      const [randomRow, randomCol] = emptyCells[randomIndex];\n\n      board[randomRow][randomCol] = Math.random() > 0.1 ? 2 : 4;\n    }\n  }\n\n  renderBoard() {\n    this.tableCells.forEach((cell, index) => {\n      const row = Math.floor(index / 4);\n      const col = index % 4;\n\n      if (this.board[row][col] !== 0) {\n        cell.textContent = this.board[row][col];\n        cell.className = `field-cell field-cell--${this.board[row][col]}`;\n      } else {\n        cell.textContent = '';\n        cell.className = 'field-cell';\n      }\n    });\n  }\n\n  renderScore() {\n    const scoreElement = document.querySelector('.game-score');\n\n    scoreElement.textContent = this.score;\n  }\n\n  has2048Tile() {\n    for (let row = 0; row < this.board.length; row++) {\n      for (let col = 0; col < this.board[row].length; col++) {\n        if (this.board[row][col] >= 2048) {\n          return this.showWinMessage();\n        }\n      }\n    }\n  }\n\n  showWinMessage() {\n    const startMessage = document.querySelector('.message.message-start');\n    const winMessage = document.querySelector('.message.message-win');\n    const loseMessage = document.querySelector('.message.message-lose');\n\n    startMessage.classList.add('hidden');\n    loseMessage.classList.add('hidden');\n\n    winMessage.classList.remove('hidden');\n  }\n\n  showLoseMessage() {\n    const startMessage = document.querySelector('.message.message-start');\n    const winMessage = document.querySelector('.message.message-win');\n    const loseMessage = document.querySelector('.message.message-lose');\n\n    startMessage.classList.add('hidden');\n    winMessage.classList.add('hidden');\n\n    loseMessage.classList.remove('hidden');\n  }\n\n  checkLose() {\n    for (let row = 0; row < this.board.length; row++) {\n      for (let col = 0; col < this.board[row].length; col++) {\n        if (this.board[row][col] === 0) {\n          return false;\n        }\n      }\n    }\n\n    for (let row = 0; row < this.board.length; row++) {\n      for (let col = 0; col < this.board[row].length; col++) {\n        if (\n          col < this.board[row].length - 1 &&\n          this.board[row][col] === this.board[row][col + 1]\n        ) {\n          return false;\n        }\n\n        if (\n          row < this.board.length - 1 &&\n          this.board[row][col] === this.board[row + 1][col]\n        ) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$a5fd07fa01589658$exports","$09e991522ca7e64e$var$game","constructor","initialState","board","score","button","document","querySelector","isStarted","handleClick","startOrRestart","bind","addEventListener","tableCells","querySelectorAll","moveLeft","boardChanged","row","length","currentRow","newRow","filter","value","i","push","JSON","stringify","placeRandomNumber","renderBoard","renderScore","has2048Tile","checkLose","showLoseMessage","moveRight","unshift","moveUp","transpose","moveDown","map","_","colIndex","getScore","scoreElement","textContent","getState","getStatus","checkWin","restart","start","messageElement","classList","remove","add","messageLoseElement","gameScore","contains","getRandomInt","min","max","Math","floor","random","emptyCells","col","randomIndex","randomRow","randomCol","forEach","cell","index","className","showWinMessage","startMessage","winMessage","loseMessage","e","key"],"version":3,"file":"index.013bcfab.js.map"}